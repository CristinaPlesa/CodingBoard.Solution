// <auto-generated />
using CodingBoard.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CodingBoard.Migrations
{
    [DbContext(typeof(CodingBoardContext))]
    [Migration("20210609184219_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CodingBoard.Models.Board", b =>
                {
                    b.Property<string>("BoardId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("BoardId");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            BoardId = "54b81afa-0458-485c-922a-e1703c30022f",
                            Description = "A selection of upcoming coding events.",
                            Name = "Events"
                        },
                        new
                        {
                            BoardId = "c3febe61-d0bf-45eb-8126-7e060ba5f1a0",
                            Description = "A list of institutions offering higher-ed degrees in the field.",
                            Name = "Education"
                        },
                        new
                        {
                            BoardId = "6497ef56-9b02-4913-8260-304c9090b07a",
                            Description = "Memes",
                            Name = "Memes"
                        },
                        new
                        {
                            BoardId = "20303354-6327-49be-9da2-ed2b5d81d41c",
                            Description = "Scholarship info for bootcamps and universities.",
                            Name = "Scholarships"
                        },
                        new
                        {
                            BoardId = "87ba011b-0221-4a3e-9f6f-14ff836cd0ea",
                            Description = "View selected works/projects by various coders",
                            Name = "Projects"
                        },
                        new
                        {
                            BoardId = "855fb0cf-5cde-4b30-9a2a-14fb76615341",
                            Description = "Find relevant job info within the field.",
                            Name = "Jobs"
                        });
                });

            modelBuilder.Entity("CodingBoard.Models.BoardUser", b =>
                {
                    b.Property<string>("BoardUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("BoardUserId");

                    b.ToTable("BoardUsers");

                    b.HasData(
                        new
                        {
                            BoardUserId = "76022aa4-9a8c-4efc-ba7c-83b45946540e",
                            Name = "Cristina"
                        },
                        new
                        {
                            BoardUserId = "c1cd5759-4195-4341-83cf-7ea8ba273d99",
                            Name = "Tom"
                        });
                });

            modelBuilder.Entity("CodingBoard.Models.Post", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("BoardId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PostAuthorId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PostId");

                    b.HasIndex("BoardId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CodingBoard.Models.Reply", b =>
                {
                    b.Property<string>("ReplyId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ReplyAuthorId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ReplyId");

                    b.HasIndex("PostId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("CodingBoard.Models.Post", b =>
                {
                    b.HasOne("CodingBoard.Models.Board", null)
                        .WithMany("Posts")
                        .HasForeignKey("BoardId");
                });

            modelBuilder.Entity("CodingBoard.Models.Reply", b =>
                {
                    b.HasOne("CodingBoard.Models.Post", null)
                        .WithMany("Replies")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("CodingBoard.Models.Board", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("CodingBoard.Models.Post", b =>
                {
                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
