// <auto-generated />
using System;
using GlassBBS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GlassBBS.Migrations
{
    [DbContext(typeof(GlassBBSContext))]
    partial class GlassBBSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("GlassBBS.Models.Board", b =>
                {
                    b.Property<string>("BoardId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("BoardId");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            BoardId = "57c50e58-bce0-45d2-829f-eda7570600d4",
                            Description = "Information regarding various residency opportunities.",
                            Name = "Residencies"
                        },
                        new
                        {
                            BoardId = "7165b229-0547-4a40-8226-6583b26e23c9",
                            Description = "A selection of educational workshop offerings.",
                            Name = "Workshops"
                        },
                        new
                        {
                            BoardId = "a63fee92-36f4-41b1-8547-a831aa9d4238",
                            Description = "A list of institutions offering higher-ed degrees in the field.",
                            Name = "Education"
                        },
                        new
                        {
                            BoardId = "e4739247-49d6-4f7f-a569-cf78c4fedb4b",
                            Description = "Scholarship info for workshops and universities.",
                            Name = "Scholarships"
                        },
                        new
                        {
                            BoardId = "03cf0496-60aa-407f-836f-31e4e2958102",
                            Description = "View selected works/exhibitions by various artists",
                            Name = "Exhibitions"
                        },
                        new
                        {
                            BoardId = "b5d0ad93-b9ab-4e9e-9aa6-5334cef8af7b",
                            Description = "Find relevant job info within the field.",
                            Name = "Jobs"
                        });
                });

            modelBuilder.Entity("GlassBBS.Models.BoardPost", b =>
                {
                    b.Property<string>("BoardPostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("BoardId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("BoardUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("BoardPostId");

                    b.HasIndex("BoardId");

                    b.HasIndex("BoardUserId");

                    b.HasIndex("PostId");

                    b.ToTable("BoardPosts");
                });

            modelBuilder.Entity("GlassBBS.Models.BoardUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("BoardUser");
                });

            modelBuilder.Entity("GlassBBS.Models.Post", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PostAuthorId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PostId");

                    b.HasIndex("PostAuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("GlassBBS.Models.PostReply", b =>
                {
                    b.Property<string>("PostReplyId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("BoardUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ReplyId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PostReplyId");

                    b.HasIndex("BoardUserId");

                    b.HasIndex("PostId");

                    b.HasIndex("ReplyId");

                    b.ToTable("PostReplies");
                });

            modelBuilder.Entity("GlassBBS.Models.Reply", b =>
                {
                    b.Property<string>("ReplyId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReplyAuthorId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ReplyId");

                    b.HasIndex("ReplyAuthorId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("GlassBBS.Models.BoardPost", b =>
                {
                    b.HasOne("GlassBBS.Models.Board", "Board")
                        .WithMany("BoardPosts")
                        .HasForeignKey("BoardId");

                    b.HasOne("GlassBBS.Models.BoardUser", null)
                        .WithMany("BoardPosts")
                        .HasForeignKey("BoardUserId");

                    b.HasOne("GlassBBS.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.Navigation("Board");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("GlassBBS.Models.Post", b =>
                {
                    b.HasOne("GlassBBS.Models.BoardUser", "PostAuthor")
                        .WithMany()
                        .HasForeignKey("PostAuthorId");

                    b.Navigation("PostAuthor");
                });

            modelBuilder.Entity("GlassBBS.Models.PostReply", b =>
                {
                    b.HasOne("GlassBBS.Models.BoardUser", null)
                        .WithMany("PostReplies")
                        .HasForeignKey("BoardUserId");

                    b.HasOne("GlassBBS.Models.Post", "Post")
                        .WithMany("PostReplies")
                        .HasForeignKey("PostId");

                    b.HasOne("GlassBBS.Models.Reply", "Reply")
                        .WithMany()
                        .HasForeignKey("ReplyId");

                    b.Navigation("Post");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("GlassBBS.Models.Reply", b =>
                {
                    b.HasOne("GlassBBS.Models.BoardUser", "ReplyAuthor")
                        .WithMany()
                        .HasForeignKey("ReplyAuthorId");

                    b.Navigation("ReplyAuthor");
                });

            modelBuilder.Entity("GlassBBS.Models.Board", b =>
                {
                    b.Navigation("BoardPosts");
                });

            modelBuilder.Entity("GlassBBS.Models.BoardUser", b =>
                {
                    b.Navigation("BoardPosts");

                    b.Navigation("PostReplies");
                });

            modelBuilder.Entity("GlassBBS.Models.Post", b =>
                {
                    b.Navigation("PostReplies");
                });
#pragma warning restore 612, 618
        }
    }
}
